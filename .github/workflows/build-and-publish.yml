name: Build and Publish YouTube SDK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  NODE_VERSION: '20'

jobs:
  generate-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          scope: '@bison.digital'

      - name: Install dependencies
        run: npm install

      - name: Generate SDK code
        run: |
          # Run the SKMTC CLI to generate SDK code (not just TypeScript utilities)
          echo "Generating YouTube SDK from OpenAPI spec..."
          
          # Generate artifacts using the correct CLI command
          echo "Generating SDK artifacts..."
          deno run -A --unstable-kv jsr:@skmtc/cli@^0.0.153 generators:generate pregnant-tuna-704 .
          
          # Create src directory if it doesn't exist
          mkdir -p src
          
          # List what was generated for debugging
          echo "Available generated directories:"
          find .skmtc/pregnant-tuna-704 -type d -name "gen-*" || echo "No gen- directories found"
          
          # Run the generated code generators to produce actual client code
          echo "Running BasicSdk generator to create actual YouTube API client..."
          
          if [ -d ".skmtc/pregnant-tuna-704/gen-basic-sdk" ]; then
            echo "Found gen-basic-sdk, running generator..."
            cd .skmtc/pregnant-tuna-704/gen-basic-sdk
            
            # Run the generator to produce the actual client code
            echo "Executing BasicSdk generator..."
            deno run -A mod.ts > ../../../src/YouTubeClient.generated.ts
            
            # Also copy any base classes we might need
            if [ -f "src/base.ts" ]; then
              cp src/base.ts ../../../src/SdkClientBase.ts
            fi
            
            cd ../../..
            echo "Generated client code:"
            ls -la src/
            head -20 src/YouTubeClient.generated.ts
          else
            echo "gen-basic-sdk not found, cannot generate client code"
            exit 1
          fi
          
          # Create index.ts that exports the generated client
          echo "Creating index.ts..."
          cat > src/index.ts << 'EOF'
          // YouTube SDK - Generated from OpenAPI spec using skm.tc
          export { YouTubeClient } from './YouTubeClient.generated.js';
          export { SdkClientBase } from './SdkClientBase.js';
          EOF
          
          echo "Final src structure:"
          find src -type f -name "*.ts" -exec echo "File: {}" \; -exec head -5 {} \;

      - name: Verify generated SDK classes
        run: |
          echo "Verifying generated YouTube client..."
          if [ -f "src/YouTubeClient.generated.ts" ]; then
            echo "✅ YouTubeClient.generated.ts exists"
            echo "Checking for class definition:"
            grep -n "class.*Client\|export.*Client" src/YouTubeClient.generated.ts || echo "No client class found"
            echo "Checking for API methods:"
            grep -n "async.*Api\|function.*Api" src/YouTubeClient.generated.ts || echo "No API methods found"
          else
            echo "❌ YouTubeClient.generated.ts not found"
            exit 1
          fi
          
          if [ -f "src/SdkClientBase.ts" ]; then
            echo "✅ SdkClientBase.ts exists"  
          else
            echo "⚠️ SdkClientBase.ts not found, creating minimal version..."
            cat > src/SdkClientBase.ts << 'EOF'
          export class SdkClientBase {
            protected baseUrl: string;
            protected headers: Record<string, string>;
            
            constructor(config: { baseUrl: string; headers?: Record<string, string> }) {
              this.baseUrl = config.baseUrl;
              this.headers = config.headers || {};
            }
            
            protected async fetch(url: string, init?: RequestInit) {
              return fetch(url, {
                ...init,
                headers: {
                  ...this.headers,
                  ...init?.headers,
                }
              });
            }
          }
          EOF
          fi

      - name: Fix import paths
        run: |
          # Fix Deno-style imports to Node.js-style imports
          echo "Fixing import paths for Node.js compatibility..."
          
          # Convert ./src/ paths to relative paths
          find src -name "*.ts" -exec sed -i 's|from '"'"'./src/|from '"'"'./|g' {} \;
          
          # Convert .ts extensions to .js for Node.js
          find src -name "*.ts" -exec sed -i 's|\.ts'"'"';|.js'"'"';|g' {} \;
          
          # Convert @/ aliases to relative paths  
          find src -name "*.ts" -exec sed -i 's|from '"'"'@/|from '"'"'./|g' {} \;
          
          # Show what the imports look like now
          echo "Sample of fixed imports:"
          grep -n "from '" src/index.ts | head -5 || echo "No imports found in index.ts"

      - name: Build package
        run: |
          npx tsc
          npx rollup -c

      - name: Run tests (if any)
        run: |
          # Add test command when tests are available
          echo "No tests configured yet"

      - name: Publish to NPM (on release)
        if: github.event_name == 'release'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7