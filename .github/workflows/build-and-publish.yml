name: Build and Publish YouTube SDK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  NODE_VERSION: '20'

jobs:
  generate-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          scope: '@bison.digital'

      - name: Install dependencies
        run: npm install

      - name: Generate SDK code
        run: |
          # Run the SKMTC CLI to generate code
          echo "Generating SDK code from OpenAPI spec..."
          deno run -A --unstable-kv jsr:@skmtc/cli@^0.0.153 --project=pregnant-tuna-704 --generate || true
          
          # Create src directory if it doesn't exist
          mkdir -p src
          
          # List what was generated for debugging
          echo "Available generated directories:"
          find .skmtc/pregnant-tuna-704 -type d -name "gen-*" || echo "No gen- directories found"
          
          # Check for different possible generation paths
          if [ -d ".skmtc/pregnant-tuna-704/gen-basic-sdk" ]; then
            echo "Found gen-basic-sdk, copying..."
            cp -r .skmtc/pregnant-tuna-704/gen-basic-sdk/* src/
          elif [ -d ".skmtc/pregnant-tuna-704/gen-typescript" ]; then
            echo "Found gen-typescript, copying..."
            cp -r .skmtc/pregnant-tuna-704/gen-typescript/* src/
          else
            echo "No generated SDK directory found, listing all contents:"
            find .skmtc/pregnant-tuna-704 -type f -name "*.ts" || echo "No TypeScript files found"
          fi
          
          # List what we have in src now
          echo "Generated files in src:"
          find src -type f -name "*.ts" | head -20 || echo "No TypeScript files in src"

      - name: Create index.ts
        run: |
          echo "Creating dynamic index.ts based on generated files..."
          
          # Start the index.ts file
          cat > src/index.ts << 'EOF'
          // Auto-generated exports for YouTube SDK
          EOF
          
          # Find and export the main client classes
          if [ -f "src/YouTubeClient.generated.ts" ]; then
            echo "export { YouTubeClient } from './YouTubeClient.generated.js';" >> src/index.ts
          fi
          
          if [ -f "src/SdkClientBase.ts" ]; then
            echo "export { SdkClientBase } from './SdkClientBase.js';" >> src/index.ts
          fi
          
          # Add a blank line
          echo "" >> src/index.ts
          echo "// Export all generated types" >> src/index.ts
          
          # Dynamically export all types from types directory
          if [ -d "src/types" ]; then
            for file in src/types/*.ts; do
              if [ -f "$file" ]; then
                filename=$(basename "$file" .ts)
                echo "export * from './types/${filename}.js';" >> src/index.ts
              fi
            done
          fi
          
          # If no types directory, try to export any .generated.ts files
          if [ ! -d "src/types" ]; then
            for file in src/*.generated.ts; do
              if [ -f "$file" ]; then
                filename=$(basename "$file" .ts)
                echo "export * from './${filename}.js';" >> src/index.ts
              fi
            done
          fi
          
          # Show what we created
          echo "Created index.ts:"
          cat src/index.ts

      - name: Fix import paths
        run: |
          # Fix Deno-style imports to Node.js-style imports
          find src -name "*.ts" -exec sed -i 's|from '"'"'@/|from '"'"'./|g' {} \;
          find src -name "*.ts" -exec sed -i 's|\.ts'"'"'|.js'"'"'|g' {} \;

      - name: Build package
        run: |
          npx tsc
          npx rollup -c

      - name: Run tests (if any)
        run: |
          # Add test command when tests are available
          echo "No tests configured yet"

      - name: Publish to NPM (on release)
        if: github.event_name == 'release'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7