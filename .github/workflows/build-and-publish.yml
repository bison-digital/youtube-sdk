name: Build and Publish YouTube SDK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  NODE_VERSION: '20'

jobs:
  generate-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          scope: '@bison.digital'

      - name: Install dependencies
        run: npm install

      - name: Generate SDK code
        run: |
          # Run the SKMTC CLI to generate SDK code (not just TypeScript utilities)
          echo "Generating YouTube SDK from OpenAPI spec..."
          
          # First, let's see what generation options are available
          echo "Available generation options:"
          deno run -A --unstable-kv jsr:@skmtc/cli@^0.0.153 --project=pregnant-tuna-704 --help || true
          
          # Try different generation commands
          echo "Attempting SDK generation..."
          deno run -A --unstable-kv jsr:@skmtc/cli@^0.0.153 --project=pregnant-tuna-704 --generate || true
          
          # Create src directory if it doesn't exist
          mkdir -p src
          
          # List what was generated for debugging
          echo "Available generated directories:"
          find .skmtc/pregnant-tuna-704 -type d -name "gen-*" || echo "No gen- directories found"
          
          # Look for generated SDK code (prioritize SDK over utilities)
          GENERATED_DIR=""
          if [ -d ".skmtc/pregnant-tuna-704/gen-basic-sdk" ]; then
            GENERATED_DIR=".skmtc/pregnant-tuna-704/gen-basic-sdk"
            echo "Found gen-basic-sdk (SDK code)"
          elif [ -d ".skmtc/pregnant-tuna-704/gen-sdk" ]; then
            GENERATED_DIR=".skmtc/pregnant-tuna-704/gen-sdk"
            echo "Found gen-sdk (SDK code)"
          elif [ -d ".skmtc/pregnant-tuna-704/gen-client" ]; then
            GENERATED_DIR=".skmtc/pregnant-tuna-704/gen-client"
            echo "Found gen-client (SDK code)"
          elif [ -d ".skmtc/pregnant-tuna-704/gen-typescript" ]; then
            GENERATED_DIR=".skmtc/pregnant-tuna-704/gen-typescript"
            echo "Found gen-typescript (TypeScript utilities - may not be SDK)"
          else
            echo "No generated SDK directory found, listing all available directories:"
            find .skmtc/pregnant-tuna-704 -type d -name "gen-*" || echo "No gen-* directories found"
            echo "All TypeScript files:"
            find .skmtc/pregnant-tuna-704 -name "*.ts" -type f || echo "No TypeScript files found"
            exit 1
          fi
          
          echo "Using generated directory: $GENERATED_DIR"
          
          # Copy all TypeScript files, maintaining directory structure
          if [ -d "$GENERATED_DIR" ]; then
            # Copy everything first
            cp -r "$GENERATED_DIR"/* src/
            
            # If there's a mod.ts (Deno style), rename it to index.ts
            if [ -f "src/mod.ts" ]; then
              echo "Found Deno-style mod.ts, renaming to index.ts"
              mv src/mod.ts src/index.ts
            fi
          fi
          
          # List what we have in src now
          echo "Generated files in src:"
          find src -type f -name "*.ts" | head -30 || echo "No TypeScript files in src"

      - name: Verify generated code
        run: |
          echo "Checking generated index.ts:"
          if [ -f "src/index.ts" ]; then
            cat src/index.ts
          else
            echo "No index.ts found!"
            exit 1
          fi

      - name: Fix import paths
        run: |
          # Fix Deno-style imports to Node.js-style imports
          echo "Fixing import paths for Node.js compatibility..."
          
          # Convert ./src/ paths to relative paths
          find src -name "*.ts" -exec sed -i 's|from '"'"'./src/|from '"'"'./|g' {} \;
          
          # Convert .ts extensions to .js for Node.js
          find src -name "*.ts" -exec sed -i 's|\.ts'"'"';|.js'"'"';|g' {} \;
          
          # Convert @/ aliases to relative paths  
          find src -name "*.ts" -exec sed -i 's|from '"'"'@/|from '"'"'./|g' {} \;
          
          # Show what the imports look like now
          echo "Sample of fixed imports:"
          grep -n "from '" src/index.ts | head -5 || echo "No imports found in index.ts"

      - name: Build package
        run: |
          npx tsc
          npx rollup -c

      - name: Run tests (if any)
        run: |
          # Add test command when tests are available
          echo "No tests configured yet"

      - name: Publish to NPM (on release)
        if: github.event_name == 'release'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7